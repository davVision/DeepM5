#===============================================================================
# EXPERIMENT01:
#===============================================================================
# Simplement hem executat el tt100k_classif.py, que entrena
# la arquitectura VGG16 (from scratch) sobre les imatges (retallades a 64x64)
# del Dataset Tsinghua-Tencent 100K.

#-------------------------------------------------------------------------------
# RSULTATS:
loss: 0.165544054018
acc: 0.978756372425
val_loss: 1.7195 (Best: 0.402 @ Epoch 9)
val_acc: 0.8920 (Best: 0.941 @ Epoch 9)

#-------------------------------------------------------------------------------
# CRIDA:
python train.py -c ./config/tt100k_classif.py -e TrafficSignVGG16 -l ./data -s ./data

#===============================================================================
# EXPERIMENT02:
#===============================================================================
# Test del model entrenat a EXPERIMENT01.
# El primer resultat Ã©s sobre el Validation Set i el segon sobre el Test Set!!

#-------------------------------------------------------------------------------
# RSULTATS:

 > Testing the model...
   Testing time: 52.8318870068. FPS: 145.858882516. Seconds per Frame: 0.00685
   Test metrics:
      acc: 0.959122753146
      loss: 0.533656342127

#-------------------------------------------------------------------------------
# CRIDA:
python train.py -c ./config/tt100k_test.py -e TrafficSignVGG16 -l ./data -s ./data

#===============================================================================
# EXPERIMENT03:
#===============================================================================
# Training from scratch de VGG16 per tt100k_classif.py + Data Augmentation +
# Test

#-------------------------------------------------------------------------------
# RSULTATS TRAIN:
loss: 0.6773
acc: 0.9572
val_loss: 2.6585 (Best: 0.616052299188 @ Epoch 19)
val_acc: 0.947368448804 (Best: 0.941 @ Epoch 19)

# RSULTATS TEST:

> Testing the model...
    Testing time: 47.0235509872. FPS: 163.875331365. Seconds per Frame: 0.00610
    Test metrics:
        acc: 0.966649387135
        loss: 0.441012918404

#-------------------------------------------------------------------------------
# CRIDA:
python train.py -c ./config/tt100k_classif.py -e TrafficSignVgg16_DataAugment -l ./data -s ./data


#===============================================================================
# EXPERIMENT04:
#===============================================================================
# Training from scratch de Resnet50 per tt100k_classif.py + Test

#-------------------------------------------------------------------------------
# RSULTATS TRAIN:
loss: 0.0056
acc: 0.9987
val_loss: 0.3052 (Best: 0.275187093543 @ Epoch 22)
val_acc: 0.9501 (Best: 0.962213246205 @ Epoch 22)

# RSULTATS TEST:

> Testing the model...
    Testing time: 47.6351320744. FPS: 161.771357912. Seconds per Frame: 0.00618
    Test metrics:
        acc: 0.970931762725
        loss: 0.21676364974

#-------------------------------------------------------------------------------
# CRIDA:
python train.py -c ./config/tt100k_classif_resnet50.py -e TrafficSignResNet50 -l ./data -s ./data


#===============================================================================
# EXPERIMENT05:
#===============================================================================
# Training from scratch de InceptionV3 per tt100k_classif.py + Test

#-------------------------------------------------------------------------------
# RSULTATS TRAIN:
loss: 0.0075
acc: 0.9984
val_loss: 0.5776 (Best: 0.26655 @ Epoch 20)
val_acc: 0.9339 (Best: 0.959 @ Epoch 20)

# RSULTATS TEST:

> Testing the model...
    Testing time: 62.6442759037. FPS: 123.012037235. Seconds per Frame: 0.00812
    Test metrics:
        acc: 0.9743
        loss: 0.19740

#-------------------------------------------------------------------------------
# CRIDA:

python train.py -c ./config/tt100k_classif_InceptionV3.py -e TrafficSignInceptionV3 -l ./data -s ./data

#===============================================================================
# EXPERIMENT06:
#===============================================================================
# Transfer learning on BTS from VGG16 trained on tt100k (freezing up to layer 9
# w/ data augmentation)

#-------------------------------------------------------------------------------
# RSULTATS TRAIN:
loss: 0.0086
acc: 0.994
val_loss: 0.197
val_acc: 0.987

# RSULTATS TEST:

> Testing the model...
  Testing time: 15.301461935. FPS: 164.690145994. Seconds per Frame: 0.0060720
  Test metrics:
     acc: 0.986904771555
     loss: 0.197165446225

#-------------------------------------------------------------------------------
#CRIDA:
python train.py -c ./config/bts_classif.py -e VGG16_transfer_learning -l ./data -s ./data

#===============================================================================
# EXPERIMENT07:
#===============================================================================
# PENDENT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Transfer learning on KITTI from VGG16 trained on imagenet (freezing up to layer 9
# w/ data augmentation)
#
#-------------------------------------------------------------------------------
# CRIDA:
python train.py -c ./config/kitti_classif.py -e FineTuneKITTI_fromVGG16_layer9 -l ./data -s ./data


#===============================================================================
# EXPERIMENT08:
#===============================================================================
# # https://github.com/titu1994/DenseNet/blob/master/densenet.py
# TT100k Learning from scratch using DenseNet Architecture from hell!
#

#-------------------------------------------------------------------------------
# RSULTATS TRAIN:
loss: 0.0502
acc: 0.9877
val_loss: 0.3178 (Best: 0.3178 @ Epoch 20)
val_acc: 0.9150 (Best: 0.9149 @ Epoch 20)

# RSULTATS TEST:
Testing time: 36.7570400238. FPS: 209.646913762. Seconds per Frame: 0.0047699
   Test metrics:
      acc: 0.950038957234
      loss: 0.217500867477


#-------------------------------------------------------------------------------
# CRIDA:
python train.py -c ./config/tt100k_classif_densenet.py -e ttk100_densenet_from_scratch -l ./data -s ./data


#===============================================================================
# EXPERIMENT09:
#===============================================================================
# Train YOLO V2 detection on TT100k

#-------------------------------------------------------------------------------
# RSULTATS TRAIN:
loss: 1.1994
avg_recall: 0.9733
avg_iou: 0.7337
val_loss: 1.8753
val_avg_recall: 0.7170
val_avg_iou: 0.5917

# RSULTATS TEST:
Testing time: 224.026482105. FPS: 18.9397251616. Seconds per Frame: 0.0527990766216
   Test metrics:
      loss: 1.6225659232
      avg_recall: 0.961067441469
      avg_iou: 0.728760613014


#-------------------------------------------------------------------------------
# CRIDA:
python train.py -c ./config/tt100k_detect_yolov2.py -e ttk100_yolov2 -l ./data -s ./data

python eval_detection_fscore.py ./data/dabrain/Experiments/TT100K_detection/ttk100_yolov2/weights.hdf5 ./data/Datasets/detection/TT100K_detection/test



#===============================================================================
# EXPERIMENT10:
#===============================================================================
# Train YOLO V2 detection on Udacity (10 EPOCHS)

#-------------------------------------------------------------------------------
# RSULTATS TRAIN:
loss: 3.0778
avg_recall: 0.7281
avg_iou: 0.5925
val_loss: 5.1377
val_avg_recall: 0.5484
val_avg_iou: 0.5134

# RSULTATS TEST:
Testing time: 130.822999001. FPS: 19.109789709. Seconds per Frame: 0.0523291996002
   Test metrics:
      loss: 5.2752484375
      avg_recall: 0.557495593262
      avg_iou: 0.521185232544


#-------------------------------------------------------------------------------
# CRIDA:
python train.py -c ./config/udacity_detect_yolov2.py -e udacity_yolov2 -l ./data -s ./data

python eval_detection_fscore.py ./data/dabrain/Experiments/Udacity/udacity_yolov2/weights.hdf5 ./data/Datasets/detection/Udacity/test


#===============================================================================
# EXPERIMENT11:
#===============================================================================
# Train YOLO V2 detection on Udacity (40 EPOCHS)

#-------------------------------------------------------------------------------
# RSULTATS TRAIN:
loss: 2.2474
avg_recall: 0.8684
avg_iou: 0.6646
val_loss: 5.2127
val_avg_recall: 0.6506
val_avg_iou: 0.5518

# RSULTATS TEST:
Testing time: 2510.06966019. FPS: 0.99598829453. Seconds per Frame: 1.00402786407
   Test metrics:
      loss: 5.36054545212
      avg_recall: 0.660971955872
      avg_iou: 0.56069840889

#-------------------------------------------------------------------------------
# CRIDA:
python train.py -c ./config/udacity_detect_yolov2.py -e udacity_yolov2_40epochs -l ./data -s ./data

python eval_detection_fscore.py ./data/dabrain/Experiments/Udacity/udacity_yolov2_40epochs/weights.hdf5 ./data/Datasets/detection/Udacity/test
